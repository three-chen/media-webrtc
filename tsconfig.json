{
    "include": [
        "env.d.ts",
        "src/**/*",
        "public/worker/worker.js"
    ],
    "exclude": [
        "src/**/__tests__/*"
    ],
    "compilerOptions": {
        "composite": true,
        "module": "ESNext",
        "moduleResolution": "Bundler",
        "types": [
            "node"
        ],
        // "lib": [
        //     "es2023"
        // ],
        "target": "es2022",
        "strict": true,
        "esModuleInterop": true,
        "skipLibCheck": true,
        "baseUrl": ".",
        "paths": {
            "@/*": [
                "./src/*"
            ]
        },
        "lib": [
            // Target ES2020 to align with Vite.
            // <https://vitejs.dev/config/build-options.html#build-target>
            // Support for newer versions of language built-ins are
            // left for the users to include, because that would require:
            //   - either the project doesn't need to support older versions of browsers;
            //   - or the project has properly included the necessary polyfills.
            "ES2020",
            "DOM",
            "DOM.Iterable"
            // No `ScriptHost` because Vue 3 dropped support for IE
        ],
        "resolveJsonModule": true,
        // `allowImportingTsExtensions` can only be used when `noEmit` or `emitDeclarationOnly` is set.
        // But `noEmit` may cause problems with solution-style tsconfigs:
        // <https://github.com/microsoft/TypeScript/issues/49844>
        // And `emitDeclarationOnly` is not always wanted.
        // Considering it's not likely to be commonly used in Vue codebases, we don't enable it here.
        // Required in Vue projects
        "jsx": "preserve",
        "jsxImportSource": "vue",
        // `"noImplicitThis": true` is part of `strict`
        // Added again here in case some users decide to disable `strict`.
        // This enables stricter inference for data properties on `this`.
        "noImplicitThis": true,
        // <https://devblogs.microsoft.com/typescript/announcing-typescript-5-0/#verbatimmodulesyntax>
        // Any imports or exports without a type modifier are left around. This is important for `<script setup>`.
        // Anything that uses the type modifier is dropped entirely.
        "verbatimModuleSyntax": true,
        // For spec compilance.
        // `true` by default if the `target` is `ES2020` or higher.
        // Explicitly set it to `true` here in case some users want to overwrite the `target`.
        "useDefineForClassFields": true,
        "forceConsistentCasingInFileNames": true,
    }
}